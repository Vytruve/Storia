name: Build Storia ERP Installer for Windows

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: global.json

      - name: Install MAUI Workloads
        run: dotnet workload install maui

      - name: Restore NuGet packages
        run: dotnet restore Storia.sln

      # 5. Publicar o Aplicativo como um Pacote MSIX
      # O comando é o mesmo, mas como o .csproj foi alterado, o resultado
      # será um pacote MSIX em vez de uma pasta de arquivos soltos.
      - name: Publish MAUI App for Windows
        run: dotnet publish src/UI/Storia.UI.Maui/Storia.UI.Maui.csproj -c Release -f net8.0-windows10.0.19041.0

      # 6. Carregar o Instalador MSIX como Artefato
      # O caminho agora procura pelo arquivo .msix dentro da pasta AppPackages.
      - name: Upload MSIX Installer
        uses: actions/upload-artifact@v4
        with:
          name: storia-erp-installer
          # Usamos um wildcard (**) para encontrar o arquivo .msix em qualquer subdiretório.
          # Isso é mais robusto do que um caminho fixo.
          path: '**/AppPackages/**/*.msix'
