name: Build e Release do Storia ERP

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-release:
    runs-on: windows-latest

    steps:
      # 1) Obter o código
      - name: Checkout do código
        uses: actions/checkout@v4

      # 2) Configurar o .NET SDK
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: global.json

      # 3) Instalar carga de trabalho MAUI
      - name: Instalar carga de trabalho MAUI
        run: dotnet workload install maui-windows

      # 4) Restore da solução (sem RID)
      - name: Restaurar pacotes NuGet da solução
        run: dotnet restore Storia.sln

      # 5) Restore específico do projeto MAUI para baixar o runtime-pack correto
      - name: Restaurar runtime-pack para MAUI (win10‑x64)
        run: dotnet restore src/UI/Storia.UI.Maui/Storia.UI.Maui.csproj --runtime win10-x64

      # 6) Build da solução (Release)
      - name: Compilar a solução (Release)
        run: dotnet build Storia.sln --configuration Release --no-restore

      # 7) Publish do projeto MAUI com RID win10‑x64
      - name: Publicar o aplicativo MAUI para Windows
        run: |
          dotnet publish src/UI/Storia.UI.Maui/Storia.UI.Maui.csproj \
            -f net8.0-windows10.0.19041.0 \
            -c Release \
            -r win10-x64 \
            --self-contained false \
            --no-build \
            -o ./publish

      # 8) Empacotar resultado
      - name: Criar arquivo ZIP
        run: Compress-Archive -Path ./publish/* -DestinationPath storia-erp-windows.zip

      # 9) Criar Release no GitHub
      - name: Criar Release no GitHub
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "release-${{ github.run_number }}"
          name: "Storia ERP Release ${{ github.run_number }}"
          body: "Release automática gerada pelo GitHub Actions."
          files: storia-erp-windows.zip
