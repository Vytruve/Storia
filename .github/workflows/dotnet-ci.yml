# Nome do Workflow
name: Build e Release do Storia ERP

# Gatilhos do Workflow
on:
  # Executa em pushes para a branch 'main'
  push:
    branches: [ main ]
  # Executa em pull requests direcionados à branch 'main'
  pull_request:
    branches: [ main ]

# Definição dos Jobs
jobs:
  # --------------------------------------------------
  # JOB ÚNICO: Construir, Publicar e Criar Release
  # --------------------------------------------------
  build-and-release:
    # Define o ambiente de execução como a última versão do Windows Server
    runs-on: windows-latest

    # Passos a serem executados no job
    steps:
    # Passo 1: Obter o código do repositório
    - name: Checkout do código
      uses: actions/checkout@v4

    # Passo 2: Configurar o ambiente .NET SDK com base no seu arquivo global.json
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        global-json-file: global.json

    # Passo 3: Instalar as ferramentas de build do .NET MAUI para Windows
    - name: Instalar carga de trabalho MAUI
      run: dotnet workload install maui-windows

    # Passo 4: Restaurar todas as dependências NuGet da solução
    - name: Restaurar pacotes NuGet
      run: dotnet restore Storia.sln

    # Passo 5: Compilar o projeto MAUI com as flags de correção
    # ESTA É A CORREÇÃO DEFINITIVA. As propriedades são aplicadas diretamente no 'build'.
    # -p:GenerateAppxPackageOnBuild=false desativa explicitamente a tarefa que está falhando.
    - name: Compilar o projeto MAUI para Windows
      run: dotnet build src/UI/Storia.UI.Maui/Storia.UI.Maui.csproj -f net8.0-windows10.0.19041.0 -c Release -p:RuntimeIdentifier=win-x64 -p:WindowsPackageType=None -p:GenerateAppxPackageOnBuild=false

    # Passo 6: Publicar o aplicativo MAUI
    # O comando publish agora apenas coleta os arquivos da compilação bem-sucedida, sem recompilar.
    - name: Publicar o aplicativo MAUI para Windows
      run: dotnet publish src/UI/Storia.UI.Maui/Storia.UI.Maui.csproj -f net8.0-windows10.0.19041.0 -c Release -p:RuntimeIdentifier=win-x64 --no-build -o ./publish

    # Passo 7: Compactar a pasta de publicação em um arquivo ZIP
    - name: Criar arquivo ZIP
      run: Compress-Archive -Path ./publish/* -DestinationPath storia-erp-windows.zip

    # Passo 8: Criar uma Release no GitHub e anexar o arquivo ZIP
    - name: Criar Release no GitHub
      # Condição: Só executa este passo se o evento for um 'push' na branch 'main'
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v2
      with:
        # Nome da tag, usando o número da execução para garantir que seja única
        tag_name: "release-${{ github.run_number }}"
        # Nome da Release
        name: "Storia ERP Release ${{ github.run_number }}"
        # Corpo/descrição da Release
        body: "Release automática gerada pelo GitHub Actions."
        # Arquivos a serem anexados à Release
        files: storia-erp-windows.zip
