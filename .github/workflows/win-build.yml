# Nome do Workflow: Descreve o que ele faz.
name: Build Windows MSIX Installer

# Gatilhos (Triggers): Define quando o workflow será executado.
on:
  # Executa ao fazer push para a branch 'main'.
  push:
    branches: [ "main" ]
  # Permite que você execute este workflow manualmente na aba Actions do GitHub.
  workflow_dispatch:

jobs:
  build:
    # Máquina Virtual: Especifica que o trabalho deve ser executado em uma máquina Windows.
    runs-on: windows-latest

    steps:
      # 1. Checkout do Código
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Configurar o .NET SDK
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      # 3. Instalar a Carga de Trabalho do .NET MAUI
      - name: Install MAUI Workload
        run: dotnet workload install maui

      # 4. Restaurar Dependências
      - name: Restore Dependencies
        run: dotnet restore "src/UI/Storia.UI.Maui/Storia.UI.Maui.csproj"

      # 5. Publicar a Aplicação como MSIX
      # Este comando agora funcionará graças à correção no arquivo .csproj.
      - name: Publish MAUI App for Windows
        run: dotnet publish "src/UI/Storia.UI.Maui/Storia.UI.Maui.csproj" -f:net8.0-windows10.0.19041.0 -c:Release /p:GenerateAppxPackageOnBuild=true /p:AppxPackageOutput=../msix /p:AppxPackageSigningEnabled=false

      # 6. Carregar o Artefato
      - name: Upload MSIX Artifact
        uses: actions/upload-artifact@v4
        with:
          name: msix-installer
          path: ./msix/
